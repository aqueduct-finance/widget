import { GenericDropdownOption } from "./types/GenericDropdownOption";
import Token from "./types/Token";
import { TokenOption, TokenTypes } from "./types/TokenOption";
import { CollapseState } from "./types/CollapseState";
interface StoreState {
    swapAmount: number;
    outboundToken: TokenTypes | undefined;
    inboundToken: TokenTypes | undefined;
    outboundTokenBalance: number;
    underlyingOutboundTokenBalance: number;
    underlyingOutboundTokenWrapperAllowance: number;
    inboundTokenBalance: number;
    underlyingInboundTokenBalance: number;
    flowrateUnit: GenericDropdownOption;
    collapseState: CollapseState;
    payOnceLength: number;
    lastSwapTx: string;
    setLastSwapTx: (lastSwapTx: string) => void;
    setOutboundToken: (token: TokenTypes) => void;
    setInboundToken: (token: TokenTypes) => void;
    setOutboundTokenBalance: (outboundTokenBalance: number) => void;
    setUnderlyingOutboundTokenAllowance: (underlyingOutboundTokenAllowance: number) => void;
    setInboundTokenBalance: (outboundTokenBalance: number) => void;
    setUpgradeDowngradeToken: (token: TokenOption) => void;
    setSelectedToken: (token: Token) => void;
    setFlowrateUnit: (flowrateUnit: GenericDropdownOption) => void;
    setPayOnceLength: (value: number) => void;
    setSwapAmount: (amount: number) => void;
    setCollapseState: (collapseState: CollapseState) => void;
    incrementOutboundTokenBalance: (amount: number) => void;
    incrementInboundTokenBalance: (amount: number) => void;
    getEffectiveFlowRateEther: () => string;
    getEffectiveFlowRate: () => string;
    isBalanceUnderSwapAmount: () => boolean;
    isBalanceUnderBuffer: () => boolean;
    getExpectedDeposit: () => number;
    getAmountNeededToWrap: () => number;
    getAmountNeededToApproveForWrap: () => number;
    getCombinedOutboundBalance: () => number;
    getCombinedInboundBalance: () => number;
    getSwapAmountAsString: () => string;
    getSwapAmountAsLocaleString: () => string;
}
export declare const useStore: import("zustand").UseBoundStore<import("zustand").StoreApi<StoreState>>;
export {};
